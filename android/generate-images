#!/bin/bash
set -ex

source ../shared/images/generate-node.sh

function generate_dockerfile {
  local api_level=$1
  local tag=$2

  mkdir -p "images/${tag}"
  cp -r bin "images/${tag}"
  echo "${tag}" > "images/${tag}/TAG"

  local dockerfile_path=images/${tag}/Dockerfile
  m4 "-DAPI_LEVEL=${api_level}" Dockerfile.m4 > "${dockerfile_path}"

  echo "${dockerfile_path}"
}

# we can set parallelism to 6 to cover all API versions (23 through 28)
# if we want to add another API version, bump paralellism by 1
if [[ "$CIRCLE_NODE_TOTAL" -gt 1 ]]; then
  let API=${CIRCLE_NODE_INDEX}+23
  
  if [[ $API == 29 ]]; then
	  API=Q
  fi

  echo Generating Android ${API} Dockerfiles

  tag=api-${API}
  node_variant_tag=api-${API}-node
  ndk_variant_tag=api-${API}-ndk

  generate_dockerfile ${API} ${tag}

  node_variant_dockerfile=$(generate_dockerfile ${API} ${node_variant_tag})

  ndk_variant_dockerfile=$(generate_dockerfile ${API} ${ndk_variant_tag})

  # This template was generated by generate-node.sh, and that includes a FROM stance.
  # We want everything except for that FROM.
  cat resources/Dockerfile-node.template | grep -v 'FROM' >> "${node_variant_dockerfile}"

  # create specific NDK dockerfiles (call m4 here when we want multiple NDK versions)
  cat Dockerfile-ndk.template >> "${ndk_variant_dockerfile}"
else
  for API in 23 24 25 26 27 28 Q; do
    echo Generating Android ${API} Dockerfiles

    tag=api-${API}
    node_variant_tag=api-${API}-node
    ndk_variant_tag=api-${API}-ndk

    generate_dockerfile ${API} ${tag}

    node_variant_dockerfile=$(generate_dockerfile ${API} ${node_variant_tag})

    ndk_variant_dockerfile=$(generate_dockerfile ${API} ${ndk_variant_tag})

    # This template was generated by generate-node.sh, and that includes a FROM stance.
    # We want everything except for that FROM.
    cat resources/Dockerfile-node.template | grep -v 'FROM' >> "${node_variant_dockerfile}"

    # create specific NDK dockerfiles (call m4 here when we want multiple NDK versions)
    cat Dockerfile-ndk.template >> "${ndk_variant_dockerfile}"
  done
fi

function find_template() {
  # find the right template - start with invoker path
  # then check this path
  template=$1
  PREFIX=$2

  if [ -e "$(dirname pwd)/resources/$PREFIX-${template}.template" ]
  then
    echo "$(dirname pwd)/resources/$PREFIX-${template}.template"
    exit 0
  fi

  if [ -e "${SHARED_DIR}/$PREFIX-${template}.template" ]
  then
    echo "${SHARED_DIR}/$PREFIX-${template}.template"
    exit 0
  fi

  exit 1
}

GENERATED_HEADER='###
### DO NOT MODIFY THIS FILE.  THIS FILE HAS BEEN AUTOGENERATED
###'

function render_readme_template() {
  BASIC_TEMP_PATH=$(mktemp)
  BROWSERS_TEMP_PATH=$(mktemp)

  TEMPLATE_TYPE=basic

  echo "$GENERATED_HEADER"

  if [ -e images/latest/Dockerfile ]
  then
    cat images/latest/Dockerfile | \
      grep -v -e '^###' -e '^{{' -e '^# BEGIN' -e '^# END BEGIN' | \
      grep -v -e '^ *$' > $BASIC_TEMP_PATH
  fi

  if [ -e images/latest/browsers/Dockerfile ]
  then
    cat images/latest/browsers/Dockerfile | \
     grep -v -e '^###' -e '^{{' -e '^# BEGIN' -e '^# END BEGIN' | \
     grep -v -e '^ *$' > $BROWSERS_TEMP_PATH
  else
    TEMPLATE_TYPE=service
  fi

  TEMPLATE_PATH=../shared/images/README-basic.template

  cat $TEMPLATE_PATH | \
    sed "s|{{NAME}}|Android|g" | \
    sed "20,29d" | \
    grep -v -e '^###' -e '^{{' -e '^# BEGIN' -e '^# END BEGIN'

  rm $BASIC_TEMP_PATH
  rm $BROWSERS_TEMP_PATH
}

render_readme_template > images/README.md
